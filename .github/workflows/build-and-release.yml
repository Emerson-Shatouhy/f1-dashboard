name: Build and Release

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Run type checking
        run: pnpm run typecheck

      - name: Run linting
        run: pnpm run lint

      - name: Build application (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: pnpm run build:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build application (Windows)
        if: matrix.os == 'windows-latest'
        run: pnpm run build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build application (macOS)
        if: matrix.os == 'macos-latest'
        run: pnpm run build:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
            dist/*.tar.gz

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            dist/*.exe
            dist/*.msi
            dist/*.zip

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            dist/*.dmg
            dist/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Get package version
        id: package-version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.package-version.outputs.version }}-${{ github.run_number }}
          release_name: F1 Dashboard v${{ steps.package-version.outputs.version }}-${{ github.run_number }}
          body: |
            Automated release of F1 Dashboard
            
            **Changes:**
            - Built from commit: ${{ github.sha }}
            - Version: ${{ steps.package-version.outputs.version }}
            
            **Downloads:**
            - Windows: `.exe`, `.msi`, `.zip`
            - macOS: `.dmg`, `.zip`
            - Linux: `.AppImage`, `.deb`, `.rpm`, `.tar.gz`
          draft: false
          prerelease: false

      - name: Upload Linux Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux-build/
          asset_name: linux-builds
          asset_content_type: application/octet-stream

      - name: Upload Windows Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows-build/
          asset_name: windows-builds
          asset_content_type: application/octet-stream

      - name: Upload macOS Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/macos-build/
          asset_name: macos-builds
          asset_content_type: application/octet-stream